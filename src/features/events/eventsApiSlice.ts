// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

const EVENTS_SERVICE_URL = import.meta.env.VITE_EVENTS_SERVICE_URL as string;
const API_KEY = import.meta.env.VITE_API_KEY as string;

const prepareHeaders = (headers: Headers) => {
    headers.set('x-api-key', API_KEY);
    return headers;
};

export interface Event {
    id: string;
    eventDate: number;
    eventDescription: string;
}

interface EventsApiResponse {
    data: Event[] | null;
    errorMessage: string | null;
}

// Define a service using a base URL and expected endpoints
export const eventsApiSlice = createApi({
    baseQuery: fetchBaseQuery({
        baseUrl: EVENTS_SERVICE_URL,
        prepareHeaders,
    }),

    reducerPath: 'eventsApi',
    // Tag types are used for caching and invalidation.
    tagTypes: ['Events'],
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `EventsApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getEvents: build.query<EventsApiResponse, void>({
            query: () => '',
            // `providesTags` determines which 'tag' is attached to the
            // cached data returned by the query.
            // providesTags: (id) => [{ type: 'Events', id }],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `eventsApiSlice.endpoints.getEvents.useQuery`
export const { useGetEventsQuery } = eventsApiSlice;
